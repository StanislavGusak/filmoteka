{"version":3,"file":"static/js/898.f8848360.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","webpack://filmoteka/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://filmoteka/./src/components/GenreList/GenreList.module.css?f8c7","components/GenreList/GenreList.jsx","components/ExpectedMoviesList/ExpectedMoviesList.styled.js","components/ExpectedMoviesList/ExpectedMoviesList.jsx","webpack://filmoteka/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__WK87Y\"};","import styles from './Container.module.css';\r\n\r\nconst Container = ({children}) => {\r\n    return <div className={styles.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;","import styled, { css } from 'styled-components';\r\n\r\nexport const CardWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 100%;\r\n`;\r\n\r\nexport const ImgWrapper = styled.div`\r\n  overflow: hidden;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const MoviesImg = styled.img`\r\n  max-width: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const CardTitle = styled.h3`\r\n  max-width: 300px;\r\n  color: var(--color);\r\n  font-size: 14px;\r\n  margin-bottom: 0;\r\n  margin-top: auto;\r\n`;\r\n\r\nexport const RatingStarsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const GoldStar = styled.span`\r\n  font-size: 10px;\r\n  color: gold;\r\n`;\r\n\r\nexport const GrayStar = styled.span`\r\n  font-size: 10px;\r\n  color: gray;\r\n`;\r\n\r\nexport const RatingText = styled.p`\r\n  color: rgb(36, 35, 35);\r\n  font-size: 10px;\r\n`;\r\n\r\nexport const RatingNumber = styled.span`\r\n  font-size: 8px;\r\n`;\r\n\r\nexport const MoviesYear = styled.p`\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-left: auto;\r\n`;\r\n\r\nexport const red = css`\r\n  background: #f85032;\r\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\r\n  background: linear-gradient(to right, #e73827, #f85032);\r\n`;\r\n\r\nexport const yellow = css`\r\n  background: #f7971e;\r\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\r\n  background: linear-gradient(to right, #ffd200, #f7971e);\r\n  color: rgb(36, 35, 35);\r\n`;\r\n\r\nexport const green = css`\r\n  background: #000000;\r\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\r\n  background: linear-gradient(to right, #0f9b0f, #000000);\r\n  color: #fff;\r\n`;\r\n\r\nexport const RatingBlock = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 10px;\r\n  heigth: 10px;\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  &.rating-red {\r\n    ${red}\r\n  }\r\n  &.rating-yellow {\r\n    ${yellow}\r\n  }\r\n  &.rating-green {\r\n    ${green}\r\n  }\r\n`;","import {\r\n    CardWrapper,\r\n    ImgWrapper,\r\n    MoviesImg,\r\n    CardTitle,\r\n    RatingStarsContainer,\r\n    GoldStar,\r\n    GrayStar,\r\n    RatingText,\r\n    RatingNumber,\r\n    RatingBlock,\r\n    MoviesYear,\r\n} from './MoviesItem.styled';\r\n\r\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\r\n    const percentRating = vote_average * 10;\r\n    const goldStars = Math.floor(percentRating / 10); \r\n\r\n    const ratingStars = Array.from({ length: 10 }, (_, i) => {\r\n        if (i < goldStars) {\r\n            return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\r\n        } else {\r\n            return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\r\n        }\r\n    });\r\n\r\n    const getRatingColor = vote_average => {\r\n        if (vote_average <= 4) {\r\n            return 'red';\r\n        } else if (vote_average < 7) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'green';\r\n        }\r\n    };\r\n\r\n    const ratingColor = getRatingColor(vote_average);\r\n    const ratingClassName = `rating-${ratingColor}`;\r\n\r\n    return (\r\n        <>\r\n            <CardWrapper>\r\n                <ImgWrapper>\r\n                    <MoviesImg\r\n                        src={\r\n                            poster_path\r\n                                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\r\n                                : 'https://dummyimage.com/300x420/fff/aaa'\r\n                        }\r\n                        alt={title}\r\n                        width={300}\r\n                    />\r\n                </ImgWrapper>\r\n                <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\r\n                <RatingStarsContainer>\r\n                    <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\r\n                    <RatingBlock className={ratingClassName}>\r\n                        <RatingNumber>\r\n                            {vote_average ? vote_average.toFixed(1) : 'N/A'}\r\n                        </RatingNumber>\r\n                    </RatingBlock>\r\n                    <MoviesYear>\r\n                        {release_date ? release_date.slice(0, 4) : 'N/A'}\r\n                    </MoviesYear>\r\n                </RatingStarsContainer>\r\n            </CardWrapper>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MoviesItem;","// extracted by mini-css-extract-plugin\nexport default {\"movies__list\":\"MoviesList_movies__list__iWvbg\",\"movies__item\":\"MoviesList_movies__item__QWC0f\"};","import { Link, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport MoviesItem from '../MoviesItem/MoviesItem';\r\nimport styles from './MoviesList.module.css';\r\n\r\nconst MoviesList = ({ movies }) => {\r\n    const location = useLocation();\r\n    return (\r\n        <ul className={styles.movies__list}>\r\n            {movies.map(\r\n                ({ id, poster_path, title, vote_average, release_date }, index) => (\r\n                    <li key={`${id}-${index}`} className={styles.movies__item}>\r\n                        <Link to={`/movies/${id}`} state={{ from: location }}>\r\n                            <MoviesItem\r\n                                key={id}\r\n                                id={id}\r\n                                poster_path={poster_path}\r\n                                title={title}\r\n                                vote_average={vote_average}\r\n                                release_date={release_date}\r\n                            />\r\n                        </Link>\r\n                    </li>\r\n                )\r\n            )}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default MoviesList;\r\n\r\nMoviesList.propTypes = {\r\n    movies: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            poster_path: PropTypes.string,\r\n            title: PropTypes.string,\r\n            vote_average: PropTypes.number,\r\n            release_date: PropTypes.string\r\n        })\r\n    ).isRequired,\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"genreWrapper\":\"GenreList_genreWrapper__O4TZk\",\"ganreList\":\"GenreList_ganreList__-EVNs\",\"ganreListItem\":\"GenreList_ganreListItem__jEET1\"};","import { Link, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport css from './GenreList.module.css';\r\n\r\nfunction GenreList({ genres }) {\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div className={css.genreWrapper}>\r\n            <ul className={css.ganreList}>\r\n                {genres.map(({ id, name }) => (\r\n                    <Link to={`genre/${id}`} state={{ from: location }} key={id}>\r\n                        <li className={css.ganreListItem}>\r\n                            <p>{name || 'Unknown'}</p>\r\n                        </li>\r\n                    </Link>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default GenreList;\r\n\r\nGenreList.propTypes = {\r\n    genres: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n};","import styled, { css } from 'styled-components';\r\nimport { SwiperSlide } from 'swiper/react';\r\nimport { AiFillFastForward, AiFillFastBackward } from 'react-icons/ai';\r\n\r\nexport const ExpectedWrapper = styled.div`\r\n  overflow: hidden;\r\n  margin-top: 100px;\r\n  height: 100%;\r\n`;\r\n\r\nexport const NavigationButton = styled.div`\r\n  &.swiper-button-next,\r\n  &.swiper-button-prev {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    z-index: 10;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 5px;\r\n    border-radius: 50%;\r\n    border: 3px solid var(--border-color);\r\n    background: var(--background-header);\r\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\r\n    cursor: pointer;\r\n  }\r\n  &.swiper-button-next {\r\n    right: 10px;\r\n    --swiper-navigation-size: 0;\r\n  }\r\n  &.swiper-button-prev {\r\n    left: 10px;\r\n    --swiper-navigation-size: 0;\r\n  }\r\n  &.swiper-button-disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const StyledSwiperSlide = styled(SwiperSlide)`\r\n  background: var(--background-movies-item);\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  color: var(--color);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const SlideFlexWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 350px;\r\n  @media screen and (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`;\r\n\r\nexport const ImgExpectedWrapper = styled.div`\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ExpectedImg = styled.img`\r\n  width: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    filter: saturate(165%);\r\n  }\r\n`;\r\n\r\nexport const ExpectedInfoContainer = styled.div`\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: auto;\r\n`;\r\n\r\nexport const ExpectedTitle = styled.p`\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  max-width: 160px;\r\n  white-space: nowrap;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const ExpectedInfoWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const StyledAiFillFastForward = styled(AiFillFastForward)`\r\n  color: var(--color);\r\n`;\r\nexport const StyledAiFillFastBackward = styled(AiFillFastBackward)`\r\n  color: var(--color);\r\n`;\r\n\r\nexport const red = css`\r\n  background: #f85032;\r\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\r\n  background: linear-gradient(to right, #e73827, #f85032);\r\n`;\r\n\r\nexport const yellow = css`\r\n  background: #f7971e;\r\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\r\n  background: linear-gradient(to right, #ffd200, #f7971e);\r\n  color: rgb(36, 35, 35);\r\n`;\r\n\r\nexport const green = css`\r\n  background: #000000;\r\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\r\n  background: linear-gradient(to right, #0f9b0f, #000000);\r\n  color: #fff;\r\n`;\r\n\r\nexport const ExpextedRating = styled.p`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 10px;\r\n  height: 10px;\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  font-size: 8px;\r\n  &.rating-red {\r\n    ${red}\r\n  }\r\n  &.rating-yellow {\r\n    ${yellow}\r\n  }\r\n  &.rating-green {\r\n    ${green}\r\n  }\r\n`;\r\n\r\nexport const ExpextedYear = styled.p`\r\n  color: red;\r\n  font-weight: bold;\r\n`;","import { useState, useEffect, useContext } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { Swiper } from 'swiper/react';\r\nimport { toast } from 'react-toastify';\r\nimport { Navigation, Scrollbar, Autoplay, Pagination } from 'swiper';\r\nimport apiTheMovieDB from '../../services/kinoApi';\r\nimport { LanguageContext } from '../LanguageContext/LanguageContext';\r\nimport Loader from '../Loader/Loader';\r\nimport 'swiper/css';\r\nimport 'swiper/css/navigation'\r\nimport {\r\n    ExpectedWrapper,\r\n    NavigationButton,\r\n    ExpectedInfoWrapper,\r\n    ExpectedInfoContainer,\r\n    StyledSwiperSlide,\r\n    SlideFlexWrapper,\r\n    ImgExpectedWrapper,\r\n    ExpectedImg,\r\n    ExpectedTitle,\r\n    ExpextedRating,\r\n    ExpextedYear,\r\n    StyledAiFillFastForward,\r\n    StyledAiFillFastBackward,\r\n} from './ExpectedMoviesList.styled';\r\n\r\nconst ExpectedMoviesList = () => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const location = useLocation();\r\n    const { selectedLanguage } = useContext(LanguageContext);\r\n\r\n    useEffect(() => {\r\n        apiTheMovieDB\r\n            .fetchExpectedMovies(selectedLanguage.iso_639_1)\r\n            .then(newMovies => {\r\n                setMovies(newMovies);\r\n            })\r\n            .catch(error => {\r\n                setError(error);\r\n                toast.error('Error');\r\n            })\r\n            .finally(setLoading(false));\r\n    }, [selectedLanguage]);\r\n\r\n    if (error) {\r\n        return <p>{error.message}</p>\r\n    }\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    <ExpectedWrapper>\r\n                        <Swiper\r\n                            modules={[Navigation, Scrollbar, Pagination, Autoplay]}\r\n                            navigation={{\r\n                                nextEl: '.swiper-button-next',\r\n                                prevEl: '.swiper-button-prev',\r\n                            }}\r\n                            scrollbar={{ draggable: true }}\r\n                            autoplay={{\r\n                                delay: 3000,\r\n                                pauseOnMouseEnter: true,\r\n                                disableOnInteraction: false\r\n                            }}\r\n                            pagination={{ clickable: true }}\r\n                            breakpoints={{\r\n                                320: {\r\n                                    slidesPerView: 1,\r\n                                },\r\n                                420: {\r\n                                    slidesPerView: 2,\r\n                                    spaceBetween: 10,\r\n                                },\r\n                                520: {\r\n                                    slidesPerView: 2,\r\n                                    spaceBetween: 25,\r\n                                },\r\n                                768: {\r\n                                    slidesPerView: 3,\r\n                                    spaceBetween: 10,\r\n                                },\r\n                                1024: {\r\n                                    slidesPerView: 4,\r\n                                    spaceBetween: 10,\r\n                                },\r\n                                1370: {\r\n                                    slidesPerView: 5,\r\n                                    spaceBetween: 10,\r\n                                },\r\n                            }}\r\n                        >\r\n                            {movies.map(\r\n                                ({ poster_path, title, id, vote_average, release_date }) => {\r\n                                    const getRatingColor = () => {\r\n                                        if (vote_average <= 4) {\r\n                                            return 'red';\r\n                                        } else if (vote_average < 7) {\r\n                                            return 'yellow';\r\n                                        } else {\r\n                                            return 'green';\r\n                                        }\r\n                                    };\r\n                                    const ratingColor = getRatingColor();\r\n                                    const ratingClassName = `rating-${ratingColor}`;\r\n                                    return (\r\n                                        <StyledSwiperSlide key={id}>\r\n                                            <SlideFlexWrapper>\r\n                                                <ImgExpectedWrapper>\r\n                                                    <Link\r\n                                                        to={`/movies/${id}`}\r\n                                                        state={{ from: location }}\r\n                                                    >\r\n                                                        <ExpectedImg\r\n                                                            src={\r\n                                                                poster_path\r\n                                                                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\r\n                                                                    : 'https://via.placeholder.com/300x420'\r\n                                                            }\r\n                                                            alt={title}\r\n                                                        />\r\n                                                    </Link>\r\n                                                </ImgExpectedWrapper>\r\n                                                <ExpectedInfoContainer>\r\n                                                    <ExpectedTitle>\r\n                                                        {title ? title : 'Movie without a title'}\r\n                                                    </ExpectedTitle>\r\n                                                    <ExpectedInfoWrapper>\r\n                                                        <ExpextedRating className={ratingClassName}>\r\n                                                            {vote_average ? vote_average.toFixed(1) : 'N/A'}\r\n                                                        </ExpextedRating>\r\n                                                        <ExpextedYear>\r\n                                                            {release_date.slice(0, 4)}\r\n                                                        </ExpextedYear>\r\n                                                    </ExpectedInfoWrapper>\r\n                                                </ExpectedInfoContainer>\r\n                                            </SlideFlexWrapper>\r\n                                        </StyledSwiperSlide>\r\n                                    )\r\n                                }\r\n                            )}\r\n                            <NavigationButton className=\"swiper-button-next\">\r\n                                <StyledAiFillFastForward />\r\n                            </NavigationButton>\r\n                            <NavigationButton className=\"swiper-button-prev\">\r\n                                <StyledAiFillFastBackward />\r\n                            </NavigationButton>\r\n                        </Swiper>\r\n                    </ExpectedWrapper>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ExpectedMoviesList;","// extracted by mini-css-extract-plugin\nexport default {\"trandingMovies\":\"HomePage_trandingMovies__cwcV5\"};","import { useState, useEffect, useCallback, useContext } from \"react\";\r\nimport { toast } from 'react-toastify';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Container from '../../components/Container/Container';\r\nimport MoviesList from \"../../components/MoviesList/MoviesList\";\r\nimport GanreList from \"../../components/GenreList/GenreList\";\r\nimport ExpectedMoviesList from '../../components/ExpectedMoviesList/ExpectedMoviesList';\r\nimport { LanguageContext } from \"../../components/LanguageContext/LanguageContext\";\r\nimport apiTheMovieDB from \"../../services/kinoApi\";\r\nimport styles from './HomePage.module.css';\r\n\r\nconst HomePage = () => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [genres, setGenres] = useState([]);\r\n    const [mounted, setMounted] = useState(false);\r\n    const { selectedLanguage } = useContext(LanguageContext);\r\n\r\n    const fetchMovies = useCallback(\r\n        page => {\r\n            setIsFetching(true);\r\n\r\n            apiTheMovieDB\r\n                .fetchTrending(page, selectedLanguage.iso_639_1)\r\n                .then(newMovies => {\r\n                    setIsFetching(false);\r\n                    if (newMovies.length === 0) {\r\n                        toast.error(\"sorry, that's all the movies we could find\");\r\n                    }\r\n\r\n                    setMovies(prevMovies => [...prevMovies, ...newMovies]);\r\n                    setCurrentPage(page);\r\n                })\r\n                .catch(error => {\r\n                    setIsFetching(false);\r\n                });\r\n        },\r\n        [selectedLanguage.iso_639_1]\r\n    );\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n        return () => setMounted(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (mounted && movies.length === 0) {\r\n            fetchMovies(currentPage, selectedLanguage.iso_639_1);\r\n        }\r\n    }, [\r\n        currentPage,\r\n        fetchMovies,\r\n        movies.length,\r\n        mounted,\r\n        selectedLanguage.iso_639_1,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        apiTheMovieDB\r\n            .fetchAllGenres(selectedLanguage.iso_639_1)\r\n            .then(data => {\r\n                setGenres(data);\r\n            })\r\n            .catch('error');\r\n    }, [selectedLanguage.iso_639_1]);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <ExpectedMoviesList />\r\n                <GanreList genres={genres} />\r\n                <section className={styles.trandingMovies}>\r\n                    <InfiniteScroll\r\n                        dataLength={movies.length}\r\n                        next={() => fetchMovies(currentPage + 1)}\r\n                        hasMore={!isFetching}\r\n                        loader={<p>Loading...</p>}\r\n                    >\r\n                        <MoviesList movies={movies} />\r\n                    </InfiniteScroll>\r\n                </section>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n"],"names":["_ref","children","_jsx","className","styles","CardWrapper","styled","_templateObject","_taggedTemplateLiteral","ImgWrapper","_templateObject2","MoviesImg","_templateObject3","CardTitle","_templateObject4","RatingStarsContainer","_templateObject5","GoldStar","_templateObject6","GrayStar","_templateObject7","RatingText","_templateObject8","RatingNumber","_templateObject9","MoviesYear","_templateObject10","red","css","_templateObject11","yellow","_templateObject12","green","_templateObject13","RatingBlock","_templateObject14","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","concat","ratingColor","getRatingColor","ratingClassName","_Fragment","_jsxs","src","alt","width","toFixed","slice","movies","location","useLocation","map","_ref2","index","id","Link","to","state","MoviesItem","genres","name","ExpectedWrapper","NavigationButton","StyledSwiperSlide","SwiperSlide","SlideFlexWrapper","ImgExpectedWrapper","ExpectedImg","ExpectedInfoContainer","ExpectedTitle","ExpectedInfoWrapper","StyledAiFillFastForward","AiFillFastForward","StyledAiFillFastBackward","AiFillFastBackward","ExpextedRating","_templateObject15","ExpextedYear","_templateObject16","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","selectedLanguage","useContext","LanguageContext","useEffect","apiTheMovieDB","iso_639_1","then","newMovies","catch","toast","finally","message","Loader","Swiper","modules","Navigation","Scrollbar","Pagination","Autoplay","navigation","nextEl","prevEl","scrollbar","draggable","autoplay","delay","pauseOnMouseEnter","disableOnInteraction","pagination","clickable","breakpoints","slidesPerView","spaceBetween","currentPage","setCurrentPage","isFetching","setIsFetching","_useState7","_useState8","setGenres","_useState9","_useState10","mounted","setMounted","fetchMovies","useCallback","page","prevMovies","_toConsumableArray","data","Container","ExpectedMoviesList","GanreList","InfiniteScroll","dataLength","next","hasMore","loader","MoviesList"],"sourceRoot":""}