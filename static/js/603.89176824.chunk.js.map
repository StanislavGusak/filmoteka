{"version":3,"file":"static/js/603.89176824.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","webpack://filmoteka/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://filmoteka/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","webpack://filmoteka/./src/pages/MoviesPage/MoviesPage.module.css?7ea7","components/SearchByYear/SearchByYear.styled.js","components/SearchByYear/SearchByYear.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nexport const CardWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 100%;\r\n`;\r\n\r\nexport const ImgWrapper = styled.div`\r\n  overflow: hidden;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const MoviesImg = styled.img`\r\n  max-width: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const CardTitle = styled.h3`\r\n  max-width: 300px;\r\n  color: var(--color);\r\n  font-size: 14px;\r\n  margin-bottom: 0;\r\n  margin-top: auto;\r\n`;\r\n\r\nexport const RatingStarsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const GoldStar = styled.span`\r\n  font-size: 10px;\r\n  color: gold;\r\n`;\r\n\r\nexport const GrayStar = styled.span`\r\n  font-size: 10px;\r\n  color: gray;\r\n`;\r\n\r\nexport const RatingText = styled.p`\r\n  color: rgb(36, 35, 35);\r\n  font-size: 10px;\r\n`;\r\n\r\nexport const RatingNumber = styled.span`\r\n  font-size: 8px;\r\n`;\r\n\r\nexport const MoviesYear = styled.p`\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-left: auto;\r\n`;\r\n\r\nexport const red = css`\r\n  background: #f85032;\r\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\r\n  background: linear-gradient(to right, #e73827, #f85032);\r\n`;\r\n\r\nexport const yellow = css`\r\n  background: #f7971e;\r\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\r\n  background: linear-gradient(to right, #ffd200, #f7971e);\r\n  color: rgb(36, 35, 35);\r\n`;\r\n\r\nexport const green = css`\r\n  background: #000000;\r\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\r\n  background: linear-gradient(to right, #0f9b0f, #000000);\r\n  color: #fff;\r\n`;\r\n\r\nexport const RatingBlock = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 10px;\r\n  heigth: 10px;\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  &.rating-red {\r\n    ${red}\r\n  }\r\n  &.rating-yellow {\r\n    ${yellow}\r\n  }\r\n  &.rating-green {\r\n    ${green}\r\n  }\r\n`;","import {\r\n    CardWrapper,\r\n    ImgWrapper,\r\n    MoviesImg,\r\n    CardTitle,\r\n    RatingStarsContainer,\r\n    GoldStar,\r\n    GrayStar,\r\n    RatingText,\r\n    RatingNumber,\r\n    RatingBlock,\r\n    MoviesYear,\r\n} from './MoviesItem.styled';\r\n\r\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\r\n    const percentRating = vote_average * 10;\r\n    const goldStars = Math.floor(percentRating / 10); \r\n\r\n    const ratingStars = Array.from({ length: 10 }, (_, i) => {\r\n        if (i < goldStars) {\r\n            return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\r\n        } else {\r\n            return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\r\n        }\r\n    });\r\n\r\n    const getRatingColor = vote_average => {\r\n        if (vote_average <= 4) {\r\n            return 'red';\r\n        } else if (vote_average < 7) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'green';\r\n        }\r\n    };\r\n\r\n    const ratingColor = getRatingColor(vote_average);\r\n    const ratingClassName = `rating-${ratingColor}`;\r\n\r\n    return (\r\n        <>\r\n            <CardWrapper>\r\n                <ImgWrapper>\r\n                    <MoviesImg\r\n                        src={\r\n                            poster_path\r\n                                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\r\n                                : 'https://dummyimage.com/300x420/fff/aaa'\r\n                        }\r\n                        alt={title}\r\n                        width={300}\r\n                    />\r\n                </ImgWrapper>\r\n                <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\r\n                <RatingStarsContainer>\r\n                    <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\r\n                    <RatingBlock className={ratingClassName}>\r\n                        <RatingNumber>\r\n                            {vote_average ? vote_average.toFixed(1) : 'N/A'}\r\n                        </RatingNumber>\r\n                    </RatingBlock>\r\n                    <MoviesYear>\r\n                        {release_date ? release_date.slice(0, 4) : 'N/A'}\r\n                    </MoviesYear>\r\n                </RatingStarsContainer>\r\n            </CardWrapper>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MoviesItem;","// extracted by mini-css-extract-plugin\nexport default {\"movies__list\":\"MoviesList_movies__list__iWvbg\",\"movies__item\":\"MoviesList_movies__item__QWC0f\"};","import { Link, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport MoviesItem from '../MoviesItem/MoviesItem';\r\nimport styles from './MoviesList.module.css';\r\n\r\nconst MoviesList = ({ movies }) => {\r\n    const location = useLocation();\r\n    return (\r\n        <ul className={styles.movies__list}>\r\n            {movies.map(\r\n                ({ id, poster_path, title, vote_average, release_date }, index) => (\r\n                    <li key={`${id}-${index}`} className={styles.movies__item}>\r\n                        <Link to={`/movies/${id}`} state={{ from: location }}>\r\n                            <MoviesItem\r\n                                key={id}\r\n                                id={id}\r\n                                poster_path={poster_path}\r\n                                title={title}\r\n                                vote_average={vote_average}\r\n                                release_date={release_date}\r\n                            />\r\n                        </Link>\r\n                    </li>\r\n                )\r\n            )}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default MoviesList;\r\n\r\nMoviesList.propTypes = {\r\n    movies: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            poster_path: PropTypes.string,\r\n            title: PropTypes.string,\r\n            vote_average: PropTypes.number,\r\n            release_date: PropTypes.string\r\n        })\r\n    ).isRequired,\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBar_form__LROhE\",\"input__search\":\"SearchBar_input__search__SOG17\",\"search__btn\":\"SearchBar_search__btn__RNKec\",\"icon\":\"SearchBar_icon__ej06C\"};","import { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from 'prop-types';\r\nimport { FcSearch } from 'react-icons/fc';\r\nimport styles from './SearchBar.module.css';\r\n\r\nconst SearchBar = ({ onSubmit }) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handleQueryChange = e => {\r\n        setQuery(e.currentTarget.value.toLowerCase().trim());\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (!query) {\r\n            toast.error('Please, enter your name movie!');\r\n            return;\r\n        }\r\n        onSubmit(query);\r\n        setQuery('');\r\n    };\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n            <input\r\n                className={styles.input__search}\r\n                name=\"query\"\r\n                value={query}\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                placeholder=\"Search...\"\r\n                onChange={handleQueryChange}\r\n            />\r\n            <button type=\"submit\" className={styles.search__btn}>\r\n              <FcSearch className={styles.icon} />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n\r\nSearchBar.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"movies__page\":\"MoviesPage_movies__page__qZzT6\"};","import styled from 'styled-components';\r\nimport Select from 'react-select';\r\n\r\nexport const SelectWrapper = styled.div`\r\n  max-width: 280px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nexport const StyleSelect = styled(Select)`\r\n  width: 208px;\r\n  box-sizing: border-box;\r\n  background-color: var(--white);\r\n  border: 1px solid grey;\r\n  font-size: 16px;\r\n  outline: none;\r\n  border-radius: 5px;\r\n  color: var(--black);\r\n`;\r\n\r\nexport const SearchText = styled.p`\r\n  color: var(--color);\r\n  font-size: 16px;\r\n`;","import { useState, useEffect, useContext } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport apiTheMovieDB from '../../services/kinoApi';\r\nimport MoviesList from '../MoviesList/MoviesList';\r\nimport Loader from '../Loader/Loader';\r\nimport ButtonLoadMore from '../ButtonLoadMore/ButtonLoadMore';\r\nimport { LanguageContext } from '../LanguageContext/LanguageContext';\r\nimport {\r\n    SelectWrapper,\r\n    SearchText,\r\n    StyleSelect,\r\n} from './SearchByYear.styled';\r\n\r\nconst SearchByYear = () => {\r\n    const [selectedYear, setSelectedYear] = useState(0);\r\n    const [movies, setMovies] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [showButton, setShowButton] = useState(false);\r\n    const { selectedLanguage } = useContext(LanguageContext);\r\n\r\n    useEffect(() => {\r\n        if (selectedYear !== 0) {\r\n            const fetchMovies = async () => {\r\n                setLoading(true);\r\n                try {\r\n                    const newMovies = await apiTheMovieDB.fetchByYear(\r\n                        page,\r\n                        selectedYear,\r\n                        selectedLanguage.iso_639_1\r\n                    );\r\n                    if (newMovies.length === 0) {\r\n                        setShowButton(false);\r\n                        if (page === 1) {\r\n                            setMovies([]);\r\n                            toast.error(\"Sorry, we couldn't find any movies for that year.\");\r\n                        } else {\r\n                            toast.error(\"That's all the movies we could find for that year.\");\r\n                        }\r\n                    } else {\r\n                        setShowButton(true);\r\n                        setMovies(prevMovies => [...prevMovies, ...newMovies])\r\n                    }\r\n                } catch (error) {\r\n                    setError(error)\r\n                } finally {\r\n                    setLoading(false)\r\n                }\r\n            };\r\n            fetchMovies();\r\n        }\r\n    }, [page, selectedYear, selectedLanguage]);\r\n\r\n    if (error) {\r\n        return <p>{error.message}</p>\r\n    }\r\n\r\n    const yearOptions = [];\r\n    const currentYear = new Date().getFullYear();\r\n    for (let year = currentYear; year >= currentYear - 50; year--) {\r\n        yearOptions.push(year);\r\n    }\r\n\r\n    const hendleIncrement = () => {\r\n        setPage(page + 1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SelectWrapper>\r\n                <StyleSelect\r\n                    classNamePrefix=\"react-select\"\r\n                    name=\"year-select\"\r\n                    id=\"year-select\"\r\n                    value={{ value: selectedYear, label: selectedYear }}\r\n                    onChange={selectedOption => setSelectedYear(selectedOption.value)}\r\n                    options={yearOptions.map(year => ({\r\n                        value: year,\r\n                        label: year,\r\n                    }))}\r\n                    menuPlacement=\"auto\"\r\n                />\r\n            </SelectWrapper>\r\n            {movies.length > 0 ? (\r\n                <MoviesList movies={movies} />\r\n            ) : loading ? (\r\n                <Loader />\r\n            ) : (\r\n                <SearchText>Please select a year...</SearchText>\r\n            )}\r\n            {showButton && <ButtonLoadMore hendleIncrement={hendleIncrement} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchByYear;","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport apiTheMovieDB from \"../../services/kinoApi\";\r\nimport MoviesList from \"../../components/MoviesList/MoviesList\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport styles from './MoviesPage.module.css';\r\nimport SearchByYear from \"../../components/SearchByYear/SearchByYear\";\r\n\r\nconst MoviesPage = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [movies, setMovies] = useState([]);\r\n    const [query, setQuery] = useState('');\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    const fetchMovies = useCallback(\r\n        page => {\r\n            setHasMore(true);\r\n            apiTheMovieDB\r\n                .fetchSearchMovie(query, page)\r\n                .then(newMovies => {\r\n                    if (newMovies.length === 0) {\r\n                        toast.error(\"sorry, that's all the movies we could find\");\r\n                        setHasMore(false);\r\n                    } else {\r\n                        setMovies(prevMovies => [...prevMovies, ...newMovies]);\r\n                        setCurrentPage(page);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    toast.error('Failed to fetch movies.');\r\n                });\r\n        },\r\n        [query]\r\n    );\r\n\r\n    useEffect(() => {\r\n        setQuery(new URLSearchParams(location.search).get('query'));\r\n        setCurrentPage(1);\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        if (!query) {\r\n            return;\r\n        }\r\n        fetchMovies(1);\r\n    }, [fetchMovies, query]);\r\n\r\n    const handleFormSubmit = newQuery => {\r\n        if (newQuery === query) {\r\n            return;\r\n        }\r\n        setMovies([]);\r\n        navigate(`?query=${newQuery}`);\r\n    };\r\n\r\n    const handleLoadMore = () => {\r\n        fetchMovies(currentPage + 1);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.movies__page}>\r\n            <div className={styles.search__wrapper}>\r\n                <SearchBar onSubmit={handleFormSubmit} />\r\n                <SearchByYear />\r\n            </div>\r\n            <MoviesList movies={movies} />\r\n            <InfiniteScroll\r\n                dataLength={movies.length}\r\n                next={handleLoadMore}\r\n                hasMore={hasMore}\r\n                loader={<p>Loading...</p>}\r\n            >\r\n                <MoviesList movies={movies} />\r\n            </InfiniteScroll>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MoviesPage;"],"names":["CardWrapper","styled","_templateObject","_taggedTemplateLiteral","ImgWrapper","_templateObject2","MoviesImg","_templateObject3","CardTitle","_templateObject4","RatingStarsContainer","_templateObject5","GoldStar","_templateObject6","GrayStar","_templateObject7","RatingText","_templateObject8","RatingNumber","_templateObject9","MoviesYear","_templateObject10","red","css","_templateObject11","yellow","_templateObject12","green","_templateObject13","RatingBlock","_templateObject14","_ref","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","_jsx","children","concat","ratingColor","getRatingColor","ratingClassName","_Fragment","_jsxs","src","alt","width","className","toFixed","slice","movies","location","useLocation","styles","map","_ref2","index","id","Link","to","state","MoviesItem","onSubmit","_useState","useState","_useState2","_slicedToArray","query","setQuery","e","preventDefault","toast","name","value","type","autoComplete","placeholder","onChange","currentTarget","toLowerCase","trim","FcSearch","SelectWrapper","StyleSelect","Select","SearchText","selectedYear","setSelectedYear","_useState3","_useState4","setMovies","_useState5","_useState6","error","setError","_useState7","_useState8","loading","setLoading","_useState9","_useState10","page","setPage","_useState11","_useState12","showButton","setShowButton","selectedLanguage","useContext","LanguageContext","useEffect","fetchMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newMovies","wrap","_context","prev","next","apiTheMovieDB","iso_639_1","sent","prevMovies","_toConsumableArray","t0","finish","stop","apply","arguments","message","yearOptions","currentYear","Date","getFullYear","year","push","classNamePrefix","label","selectedOption","options","menuPlacement","MoviesList","Loader","ButtonLoadMore","hendleIncrement","navigate","useNavigate","currentPage","setCurrentPage","hasMore","setHasMore","useCallback","then","catch","URLSearchParams","search","get","SearchBar","newQuery","SearchByYear","InfiniteScroll","dataLength","loader"],"sourceRoot":""}